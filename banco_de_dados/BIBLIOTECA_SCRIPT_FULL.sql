USE [master]
CREATE DATABASE BIBLIOTECA
GO

USE BIBLIOTECA
GO

CREATE TABLE LIVRO (
Cod_livro INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Titulo VARCHAR(50) NOT NULL,
Edicao CHAR(1),
Ano_Publicacao INT,
ISBN BIGINT NOT NULL
)

CREATE TABLE EMPRESTIMO_LIVRO(
Cod_Emprestimo_livro INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Emprestado CHAR(1) NOT NULL,
Data_Prevista_Entrega DATETIME NOT NULL,
Cod_emprestimo INT NOT NULL,
Cod_Livro INT NOT NULL
)

CREATE TABLE EMPRESTIMO(
Cod_Emprestimo INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Cod_Usuario INT NOT NULL,
Cod_Atendente INT NOT NULL,
Data_Emprestimo DATETIME NOT NULL
)

CREATE TABLE USUARIO(
Cod_Usuario INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Cod_Curso INT,
Nome VARCHAR(100) NOT NULL,
Email VARCHAR(100),
Senha VARCHAR(100)
)

CREATE TABLE CURSO(
Cod_Curso INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Nome VARCHAR (100) NOT NULL
)

CREATE TABLE ATENDENTE(
Cod_Atendente INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Nome VARCHAR (100) NOT NULL,
Email VARCHAR(100)
)

CREATE TABLE AUDITORIA(
ID_AUDITORIA INT PRIMARY KEY NOT NULL IDENTITY(1,1),
TIPO_EVENTO CHAR(10) NOT NULL,
DATA_ALTERACAO DATETIME NOT NULL DEFAULT GETDATE(),
USUARIO VARCHAR(100) NOT NULL DEFAULT SYSTEM_USER,
ID_TABELA INT NOT NULL,
NOME_TABELA VARCHAR(256) NOT NULL,
NOME_CAMPO VARCHAR(256) NOT NULL,
VALOR_ANTIGO VARCHAR(MAX),
VALOR_NOVO VARCHAR(MAX)
)


ALTER TABLE EMPRESTIMO_LIVRO ADD CONSTRAINT CK_EMPRESTIMO
CHECK (Emprestado='S' OR Emprestado='N')

ALTER TABLE EMPRESTIMO ADD CONSTRAINT CK_INSERT_DATA
DEFAULT (GETDATE()) FOR Data_Emprestimo

ALTER TABLE EMPRESTIMO_LIVRO
ADD CONSTRAINT FK_EMP_LIVRO_COD_LIVRO FOREIGN KEY (Cod_Livro) REFERENCES LIVRO (Cod_livro)

ALTER TABLE EMPRESTIMO_LIVRO
ADD CONSTRAINT FK_EMP_LIVRO_COD_EMPRESTIMO FOREIGN KEY (Cod_emprestimo) REFERENCES EMPRESTIMO (Cod_emprestimo)

ALTER TABLE EMPRESTIMO
ADD CONSTRAINT FK_EMP_COD_USUARIO FOREIGN KEY (Cod_Usuario) REFERENCES USUARIO (Cod_Usuario)

ALTER TABLE EMPRESTIMO
ADD CONSTRAINT FK_EMP_COD_ATENDENTE FOREIGN KEY (Cod_Atendente) REFERENCES ATENDENTE (Cod_Atendente)

ALTER TABLE USUARIO
ADD CONSTRAINT FK_USER_COD_CURSO FOREIGN KEY (Cod_Curso) REFERENCES CURSO (Cod_Curso)





GO

IF (OBJECT_ID('dbo.PS_INSERT_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_LIVRO
GO

CREATE PROCEDURE PS_INSERT_LIVRO
@Titulo VARCHAR(50) = NULL,
@Edicao CHAR(1) = NULL,
@Ano_Publicacao INT = NULL,
@ISBN BIGINT = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO LIVRO (Titulo, Edicao, Ano_Publicacao, ISBN)
	VALUES
	(@Titulo, @Edicao, @Ano_Publicacao, @ISBN)
	
END





GO

IF (OBJECT_ID('dbo.PS_INSERT_CURSO') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_CURSO
GO

CREATE PROCEDURE PS_INSERT_CURSO
@Nome VARCHAR (100) = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO CURSO (Nome)
	VALUES
	(@Nome)
	
END



GO

IF (OBJECT_ID('dbo.PS_INSERT_USUARIO') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_USUARIO
GO

CREATE PROCEDURE PS_INSERT_USUARIO
@Cod_Curso INT = NULL,
@Nome VARCHAR(100) = NULL,
@Email VARCHAR(100) = NULL,
@Senha VARCHAR(100) = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO USUARIO (Cod_Curso, Nome, Email, Senha)
	VALUES
	(@Cod_Curso, @Nome, @Email, @Senha)
	
END






GO

IF (OBJECT_ID('dbo.PS_INSERT_ATENDENTE') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_ATENDENTE
GO

CREATE PROCEDURE PS_INSERT_ATENDENTE
@Nome VARCHAR (100) = NULL,
@Email VARCHAR(100) = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO ATENDENTE (Nome, Email)
	VALUES
	(@Nome, @Email)
	
END






GO

IF (OBJECT_ID('dbo.PS_INSERT_EMPRESTIMO') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_EMPRESTIMO
GO

CREATE PROCEDURE PS_INSERT_EMPRESTIMO
@Cod_Usuario INT = NULL,
@Cod_Atendente INT = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO EMPRESTIMO (Cod_Usuario, Cod_Atendente)
	VALUES
	(@Cod_Usuario, @Cod_Atendente)
	
END



GO

IF (OBJECT_ID('dbo.PS_INSERT_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_EMPRESTIMO_LIVRO
GO

CREATE PROCEDURE PS_INSERT_EMPRESTIMO_LIVRO
@Emprestado CHAR(1) = NULL,
@Cod_emprestimo INT = NULL,
@Cod_Livro INT = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	INSERT INTO EMPRESTIMO_LIVRO (Emprestado, Data_Prevista_Entrega, Cod_emprestimo, Cod_Livro)
	VALUES
	(@Emprestado, 
	(SELECT Data_Emprestimo+7 FROM EMPRESTIMO WHERE Cod_Emprestimo = @Cod_emprestimo),
	 @Cod_emprestimo, @Cod_Livro)

END


GO

IF (OBJECT_ID('dbo.PS_DELETE_USUARIO') IS NOT NULL ) 
DROP PROCEDURE PS_DELETE_USUARIO
GO

CREATE PROCEDURE PS_DELETE_USUARIO
@Cod_Usuario INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	DELETE USUARIO FROM USUARIO WHERE Cod_Usuario = @Cod_Usuario

END


GO

IF (OBJECT_ID('dbo.PS_DELETE_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_DELETE_LIVRO
GO

CREATE PROCEDURE PS_DELETE_LIVRO
@Cod_livro INT = NULL,
@ISBN BIGINT = NULL

AS
BEGIN
	SET NOCOUNT ON

	DELETE LIVRO FROM LIVRO WHERE Cod_livro = @Cod_livro OR ISBN = @ISBN

END


GO

IF (OBJECT_ID('dbo.PS_DELETE_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_DELETE_EMPRESTIMO_LIVRO
GO

CREATE PROCEDURE PS_DELETE_EMPRESTIMO_LIVRO
@Cod_Emprestimo_livro INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	DELETE EMPRESTIMO_LIVRO FROM EMPRESTIMO_LIVRO WHERE Cod_Emprestimo_livro = @Cod_Emprestimo_livro

END



GO

IF (OBJECT_ID('dbo.PS_DELETE_EMPRESTIMO') IS NOT NULL ) 
DROP PROCEDURE PS_DELETE_EMPRESTIMO
GO

CREATE PROCEDURE PS_DELETE_EMPRESTIMO
@Cod_Emprestimo INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	DELETE EMPRESTIMO FROM EMPRESTIMO WHERE Cod_Emprestimo = @Cod_Emprestimo

END


GO

IF (OBJECT_ID('dbo.PS_DELETE_CURSO') IS NOT NULL ) 
DROP PROCEDURE PS_DELETE_CURSO
GO

CREATE PROCEDURE PS_DELETE_CURSO
@Cod_Curso INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	DELETE CURSO FROM CURSO WHERE Cod_Curso = @Cod_Curso

END



GO

IF (OBJECT_ID('dbo.PS_DELETE_ATENDENTE') IS NOT NULL ) 
DROP PROCEDURE PS_DELETE_ATENDENTE
GO

CREATE PROCEDURE PS_DELETE_ATENDENTE
@Cod_Atendente INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	DELETE ATENDENTE FROM ATENDENTE WHERE Cod_Atendente = @Cod_Atendente

END




GO

IF (OBJECT_ID('dbo.PS_SELECT_USUARIO') IS NOT NULL ) 
DROP PROCEDURE PS_SELECT_USUARIO
GO

CREATE PROCEDURE PS_SELECT_USUARIO
@Cod_Usuario INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	SELECT * FROM USUARIO WHERE Cod_Usuario = @Cod_Usuario

END

GO

IF (OBJECT_ID('dbo.PS_SELECT_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_SELECT_LIVRO
GO

CREATE PROCEDURE PS_SELECT_LIVRO
@Cod_livro INT = NULL,
@ISBN BIGINT = NULL

AS
BEGIN
	SET NOCOUNT ON

	SELECT * FROM LIVRO WHERE Cod_livro = @Cod_livro OR ISBN = @ISBN

END





GO

IF (OBJECT_ID('dbo.PS_SELECT_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_SELECT_EMPRESTIMO_LIVRO
GO

CREATE PROCEDURE PS_SELECT_EMPRESTIMO_LIVRO
@Cod_Emprestimo_livro INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	SELECT * FROM EMPRESTIMO_LIVRO WHERE Cod_Emprestimo_livro = @Cod_Emprestimo_livro

END





GO

IF (OBJECT_ID('dbo.PS_SELECT_EMPRESTIMO') IS NOT NULL ) 
DROP PROCEDURE PS_SELECT_EMPRESTIMO
GO

CREATE PROCEDURE PS_SELECT_EMPRESTIMO
@Cod_Emprestimo INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	SELECT * FROM EMPRESTIMO WHERE Cod_Emprestimo = @Cod_Emprestimo

END


GO

IF (OBJECT_ID('dbo.PS_SELECT_CURSO') IS NOT NULL ) 
DROP PROCEDURE PS_SELECT_CURSO
GO

CREATE PROCEDURE PS_SELECT_CURSO
@Cod_Curso INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	SELECT * FROM CURSO WHERE Cod_Curso = @Cod_Curso

END



GO

IF (OBJECT_ID('dbo.PS_SELECT_ATENDENTE') IS NOT NULL ) 
DROP PROCEDURE PS_SELECT_ATENDENTE
GO

CREATE PROCEDURE PS_SELECT_ATENDENTE
@Cod_Atendente INT = NULL

AS
BEGIN
	SET NOCOUNT ON

	SELECT * FROM ATENDENTE WHERE Cod_Atendente = @Cod_Atendente

END




GO

IF (OBJECT_ID('dbo.PS_UPDATE_USUARIO') IS NOT NULL ) 
DROP PROCEDURE PS_UPDATE_USUARIO
GO

CREATE PROCEDURE PS_UPDATE_USUARIO
@Cod_Usuario INT = NULL,
@Cod_Curso INT = NULL,
@Nome VARCHAR(100) = NULL,
@Email VARCHAR(100) = NULL,
@Senha VARCHAR(100) = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE USUARIO
		SET
			Cod_Curso = ISNULL(@Cod_Curso, Cod_Curso),
			Nome = ISNULL(@Nome, Nome),
			Email = ISNULL(@Email, Email),
			Senha = ISNULL(@Senha, Senha)
	FROM USUARIO
	WHERE Cod_Usuario = @Cod_Usuario
	
END




GO

IF (OBJECT_ID('dbo.PS_UPDATE_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_UPDATE_LIVRO
GO

CREATE PROCEDURE PS_UPDATE_LIVRO
@Cod_livro INT = NULL,
@Titulo VARCHAR(50) = NULL,
@Edicao CHAR(1) = NULL,
@Ano_Publicacao INT = NULL,
@ISBN BIGINT = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE LIVRO
		SET
			Titulo = ISNULL(@Titulo, Titulo),
			Edicao = ISNULL(@Edicao, Edicao),
			Ano_Publicacao = ISNULL(@Ano_Publicacao, Ano_Publicacao),
			ISBN = ISNULL(@ISBN, ISBN)
	FROM LIVRO
	WHERE Cod_livro = @Cod_livro OR ISBN = @ISBN
	
END
	


GO

IF (OBJECT_ID('dbo.PS_UPDATE_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP PROCEDURE PS_UPDATE_EMPRESTIMO_LIVRO
GO

CREATE PROCEDURE PS_UPDATE_EMPRESTIMO_LIVRO
@Cod_Emprestimo_livro INT = NULL,
@Emprestado CHAR(1) = NULL,
@Data_Prevista_Entrega DATETIME = NULL,
@Cod_emprestimo INT = NULL,
@Cod_Livro INT = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE EMPRESTIMO_LIVRO
		SET
			Emprestado = ISNULL(@Emprestado, Emprestado),
			Data_Prevista_Entrega = ISNULL(@Data_Prevista_Entrega, Data_Prevista_Entrega),
			Cod_emprestimo = ISNULL(@Cod_emprestimo, Cod_emprestimo),
			Cod_Livro = ISNULL(@Cod_Livro, Cod_Livro)
	FROM EMPRESTIMO_LIVRO
	WHERE Cod_Emprestimo_livro = @Cod_Emprestimo_livro
	
END
	


GO

IF (OBJECT_ID('dbo.PS_UPDATE_EMPRESTIMO') IS NOT NULL ) 
DROP PROCEDURE PS_UPDATE_EMPRESTIMO
GO

CREATE PROCEDURE PS_UPDATE_EMPRESTIMO
@Cod_Emprestimo INT = NULL,
@Cod_Usuario INT = NULL,
@Cod_Atendente INT = NULL,
@Data_Emprestimo DATETIME = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE EMPRESTIMO
		SET
		Cod_Usuario = ISNULL(@Cod_Usuario, Cod_Usuario),
		Cod_Atendente = ISNULL(@Cod_Atendente, Cod_Atendente),
		Data_Emprestimo = ISNULL(@Data_Emprestimo, Data_Emprestimo)
	FROM EMPRESTIMO
	WHERE Cod_Emprestimo = @Cod_Emprestimo
	
END
	



GO

IF (OBJECT_ID('dbo.PS_UPDATE_CURSO') IS NOT NULL ) 
DROP PROCEDURE PS_UPDATE_CURSO
GO

CREATE PROCEDURE PS_UPDATE_CURSO
@Cod_Curso INT = NULL,
@Nome VARCHAR (100) = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE CURSO
		SET Nome = ISNULL(@Nome, Nome)
	FROM CURSO
	WHERE Cod_Curso = @Cod_Curso
	
END
	



GO

IF (OBJECT_ID('dbo.PS_UPDATE_ATENDENTE') IS NOT NULL ) 
DROP PROCEDURE PS_UPDATE_ATENDENTE
GO

CREATE PROCEDURE PS_UPDATE_ATENDENTE
@Cod_Atendente INT = NULL,
@Nome VARCHAR (100) = NULL,
@Email VARCHAR(100) = NULL

AS
BEGIN
	SET NOCOUNT ON
	
	UPDATE ATENDENTE
		SET
			Nome = ISNULL(@Nome, Nome),
			Email = ISNULL(@Email, Email)
	FROM ATENDENTE
	WHERE Cod_Atendente = @Cod_Atendente
	
END


GO


IF (OBJECT_ID('dbo.PS_INSERT_AUDITORIA') IS NOT NULL ) 
DROP PROCEDURE PS_INSERT_AUDITORIA
GO

CREATE PROCEDURE PS_INSERT_AUDITORIA
@TIPO_EVENTO CHAR(10) = NULL,
@ID_TABELA INT = NULL,
@NOME_TABELA VARCHAR(256) = NULL,
@NOME_CAMPO VARCHAR(256) = NULL,
@VALOR_ANTIGO VARCHAR(MAX) = NULL,
@VALOR_NOVO VARCHAR(MAX) = NULL

AS
BEGIN
SET NOCOUNT ON
	INSERT INTO AUDITORIA(TIPO_EVENTO, ID_TABELA, NOME_TABELA, NOME_CAMPO, VALOR_ANTIGO, VALOR_NOVO)
	VALUES
	(@TIPO_EVENTO, @ID_TABELA, @NOME_TABELA, @NOME_CAMPO, @VALOR_ANTIGO, @VALOR_NOVO)
END

GO

IF (OBJECT_ID('dbo.VW_USUARIO') IS NOT NULL ) 
DROP VIEW VW_USUARIO
GO

CREATE VIEW VW_USUARIO
AS
	SELECT u.Cod_Usuario, u.Nome, c.Nome AS Curso, u.Email, u.Senha FROM USUARIO u
	INNER JOIN CURSO c ON u.Cod_Curso = c.Cod_Curso


GO

IF (OBJECT_ID('dbo.VW_LIVRO') IS NOT NULL ) 
DROP VIEW VW_LIVRO
GO

CREATE VIEW VW_LIVRO
AS
	SELECT * FROM LIVRO 


GO

IF (OBJECT_ID('dbo.VW_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP VIEW VW_EMPRESTIMO_LIVRO
GO

CREATE VIEW VW_EMPRESTIMO_LIVRO
AS
	SELECT el.Cod_Emprestimo_livro, e.Cod_Emprestimo, el.Emprestado, u.Nome AS Usuario, a.Nome AS Atendente, e.Data_Emprestimo,
		   el.Data_Prevista_Entrega, l.Titulo
	FROM EMPRESTIMO_LIVRO el
	INNER JOIN EMPRESTIMO e ON e.Cod_Emprestimo = el.Cod_emprestimo
	INNER JOIN USUARIO u ON e.Cod_Usuario = u.Cod_Usuario
	INNER JOIN ATENDENTE a ON e.Cod_Atendente = a.Cod_Atendente
	INNER JOIN LIVRO l ON l.Cod_livro = el.Cod_Livro


GO

IF (OBJECT_ID('dbo.VW_EMPRESTIMO') IS NOT NULL ) 
DROP VIEW VW_EMPRESTIMO
GO

CREATE VIEW VW_EMPRESTIMO
AS
	SELECT e.Cod_Emprestimo, u.Nome AS Usuario, a.Nome AS Atendente, e.Data_Emprestimo FROM EMPRESTIMO e
	INNER JOIN USUARIO u ON e.Cod_Usuario = u.Cod_Usuario
	INNER JOIN ATENDENTE a ON e.Cod_Atendente = a.Cod_Atendente


GO

IF (OBJECT_ID('dbo.VW_CURSO') IS NOT NULL ) 
DROP VIEW VW_CURSO
GO

CREATE VIEW VW_CURSO
AS
	SELECT *
	FROM CURSO


GO

IF (OBJECT_ID('dbo.VW_ATENDENTE') IS NOT NULL ) 
DROP VIEW VW_ATENDENTE
GO

CREATE VIEW VW_ATENDENTE
AS
	SELECT *
	FROM ATENDENTE


GO

IF (OBJECT_ID('dbo.TR_UPDATE_USUARIO') IS NOT NULL ) 
DROP TRIGGER TR_UPDATE_USUARIO
GO

CREATE TRIGGER TR_UPDATE_USUARIO ON USUARIO
AFTER UPDATE
AS
DECLARE
@COD_USUARIO INT,
@COD_CURSO INT,
@NOME VARCHAR(100),
@EMAIL VARCHAR(100),
@SENHA VARCHAR(100),
@COD_CURSO_NOVO INT,
@NOME_NOVO VARCHAR(100),
@EMAIL_NOVO VARCHAR(100),
@SENHA_NOVO VARCHAR(100)

SELECT @COD_USUARIO = Cod_Usuario,
	   @COD_CURSO = Cod_Curso,
	   @NOME = Nome,
	   @EMAIL = Email,
	   @SENHA = Senha
FROM DELETED

SELECT @COD_CURSO_NOVO = Cod_Curso,
	   @NOME_NOVO = Nome,
	   @EMAIL_NOVO = Email,
	   @SENHA_NOVO = Senha
FROM INSERTED
	
	IF(@COD_CURSO <> @COD_CURSO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_USUARIO,'USUARIO','COD_CURSO',@COD_CURSO,@COD_CURSO_NOVO

	IF(@NOME <> @NOME_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_USUARIO,'USUARIO','NOME',@NOME,@NOME_NOVO

	IF(@EMAIL <> @EMAIL_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_USUARIO,'USUARIO','EMAIL',@EMAIL,@EMAIL_NOVO

	IF(@SENHA <> @SENHA_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_USUARIO,'USUARIO','SENHA',@SENHA,@SENHA_NOVO
GO


IF (OBJECT_ID('dbo.TR_UPDATE_LIVRO') IS NOT NULL ) 
DROP TRIGGER TR_UPDATE_LIVRO
GO

CREATE TRIGGER TR_UPDATE_LIVRO ON LIVRO
AFTER UPDATE
AS
DECLARE
@COD_LIVRO INT,
@TITULO VARCHAR(50),
@EDICAO CHAR(1),
@ANO_PUBLICACAO INT,
@ISBN BIGINT,
@TITULO_NOVO VARCHAR(50),
@EDICAO_NOVO CHAR(1),
@ANO_PUBLICACAO_NOVO INT,
@ISBN_NOVO BIGINT

SELECT @COD_LIVRO = Cod_livro,
	   @TITULO = Titulo,
	   @EDICAO = Edicao,
	   @ANO_PUBLICACAO = Ano_Publicacao,
	   @ISBN = ISBN
FROM DELETED

SELECT @TITULO_NOVO = Titulo,
	   @EDICAO_NOVO = Edicao,
	   @ANO_PUBLICACAO_NOVO = Ano_Publicacao,
	   @ISBN_NOVO = ISBN
FROM INSERTED
	
	IF(@TITULO <> @TITULO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_LIVRO,'LIVRO','TITULO',@TITULO,@TITULO_NOVO

	IF(@EDICAO <> @EDICAO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_LIVRO,'LIVRO','EDICAO',@EDICAO,@EDICAO_NOVO

	IF(@ANO_PUBLICACAO <> @ANO_PUBLICACAO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_LIVRO,'LIVRO','ANO_PUBLICACAO',@ANO_PUBLICACAO,@ANO_PUBLICACAO_NOVO

	IF(@ISBN <> @ISBN_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_LIVRO,'LIVRO','ISBN',@ISBN,@ISBN_NOVO
GO


IF (OBJECT_ID('dbo.TR_UPDATE_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP TRIGGER TR_UPDATE_EMPRESTIMO_LIVRO
GO

CREATE TRIGGER TR_UPDATE_EMPRESTIMO_LIVRO ON EMPRESTIMO_LIVRO
AFTER UPDATE
AS
DECLARE
@COD_EMPRESTIMO_LIVRO INT,
@EMPRESTADO CHAR(1),
@DATA_PREVISTA_ENTREGA DATETIME,
@COD_EMPRESTIMO INT,
@COD_LIVRO INT,
@EMPRESTADO_NOVO CHAR(1),
@DATA_PREVISTA_ENTREGA_NOVO DATETIME,
@COD_EMPRESTIMO_NOVO INT,
@COD_LIVRO_NOVO INT

SELECT @COD_EMPRESTIMO_LIVRO = Cod_Emprestimo_livro,
	   @EMPRESTADO = Emprestado,
	   @DATA_PREVISTA_ENTREGA = Data_Prevista_Entrega,
	   @COD_EMPRESTIMO = Cod_emprestimo,
	   @COD_LIVRO = Cod_Livro
FROM DELETED

SELECT @EMPRESTADO_NOVO = Emprestado,
	   @DATA_PREVISTA_ENTREGA_NOVO = Data_Prevista_Entrega,
	   @COD_EMPRESTIMO_NOVO = Cod_emprestimo,
	   @COD_LIVRO_NOVO = Cod_Livro
FROM INSERTED
	
	IF(@EMPRESTADO <> @EMPRESTADO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','EMPRESTADO',@EMPRESTADO,@EMPRESTADO_NOVO

	IF(@DATA_PREVISTA_ENTREGA <> @DATA_PREVISTA_ENTREGA_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','DATA_PREVISTA_ENTREGA',@DATA_PREVISTA_ENTREGA,@DATA_PREVISTA_ENTREGA_NOVO

	IF(@COD_EMPRESTIMO <> @COD_EMPRESTIMO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','COD_EMPRESTIMO',@COD_EMPRESTIMO,@COD_EMPRESTIMO_NOVO

	IF(@COD_LIVRO <> @COD_LIVRO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','COD_LIVRO',@COD_LIVRO,@COD_LIVRO_NOVO
GO


IF (OBJECT_ID('dbo.TR_UPDATE_EMPRESTIMO') IS NOT NULL ) 
DROP TRIGGER TR_UPDATE_EMPRESTIMO
GO

CREATE TRIGGER TR_UPDATE_EMPRESTIMO ON EMPRESTIMO
AFTER UPDATE
AS
DECLARE
@COD_EMPRESTIMO INT,
@COD_USUARIO INT,
@COD_ATENDENTE INT,
@DATA_EMPRESTIMO DATETIME,
@COD_USUARIO_NOVO INT,
@COD_ATENDENTE_NOVO INT,
@DATA_EMPRESTIMO_NOVO DATETIME

SELECT @COD_EMPRESTIMO = Cod_Emprestimo,
	   @COD_USUARIO = Cod_Usuario,
	   @COD_ATENDENTE = Cod_Atendente,
	   @DATA_EMPRESTIMO = Data_Emprestimo
FROM DELETED

SELECT @COD_USUARIO_NOVO = Cod_Usuario,
	   @COD_ATENDENTE_NOVO = Cod_Atendente,
	   @DATA_EMPRESTIMO_NOVO = Data_Emprestimo
FROM INSERTED
	
	IF(@COD_USUARIO <> @COD_USUARIO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO,'EMPRESTIMO','COD_USUARIO',@COD_USUARIO,@COD_USUARIO_NOVO

	IF(@COD_ATENDENTE <> @COD_ATENDENTE_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO,'EMPRESTIMO','COD_ATENDENTE',@COD_ATENDENTE,@COD_ATENDENTE_NOVO

	IF(@DATA_EMPRESTIMO <> @DATA_EMPRESTIMO_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_EMPRESTIMO,'EMPRESTIMO','DATA_EMPRESTIMO',@DATA_EMPRESTIMO,@DATA_EMPRESTIMO_NOVO
GO


IF (OBJECT_ID('dbo.TR_UPDATE_CURSO') IS NOT NULL ) 
DROP TRIGGER TR_UPDATE_CURSO
GO

CREATE TRIGGER TR_UPDATE_CURSO ON CURSO
AFTER UPDATE
AS
DECLARE
@COD_CURSO INT,
@NOME VARCHAR(100),
@NOME_NOVO VARCHAR(100)

SELECT @COD_CURSO = Cod_Curso,
	   @NOME  = Nome
FROM DELETED

SELECT @NOME_NOVO = Nome
FROM INSERTED
	
	IF(@NOME <> @NOME_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@COD_CURSO,'CURSO','NOME',@NOME,@NOME_NOVO
		
GO


IF (OBJECT_ID('dbo.TR_UPDATE_ATENDENTE') IS NOT NULL ) 
DROP TRIGGER TR_UPDATE_ATENDENTE
GO

CREATE TRIGGER TR_UPDATE_ATENDENTE ON ATENDENTE
AFTER UPDATE
AS
DECLARE
@Cod_ATENDENTE INT,
@NOME VARCHAR(100),
@EMAIL VARCHAR(100),
@NOME_NOVO VARCHAR(100),
@EMAIL_NOVO VARCHAR(100)

SELECT @Cod_ATENDENTE = Cod_Atendente,
	   @NOME  = Nome,
	   @EMAIL = Email
FROM DELETED

SELECT @NOME_NOVO  = Nome,
	   @EMAIL_NOVO = Email
FROM INSERTED
	
	IF(@NOME <> @NOME_NOVO)
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@Cod_ATENDENTE,'ATENDENTE','NOME',@NOME,@NOME_NOVO
		
	IF(@EMAIL <> @EMAIL_NOVO)
		
		EXEC PS_INSERT_AUDITORIA 'UPDATE',@Cod_ATENDENTE,'ATENDENTE','EMAIL',@EMAIL,@EMAIL_NOVO
	
GO


IF (OBJECT_ID('dbo.TR_DELETE_USUARIO') IS NOT NULL ) 
DROP TRIGGER TR_DELETE_USUARIO
GO

CREATE TRIGGER TR_DELETE_USUARIO ON USUARIO
AFTER DELETE
AS
DECLARE
@COD_USUARIO INT,
@COD_CURSO INT,
@NOME VARCHAR(100),
@EMAIL VARCHAR(100),
@SENHA VARCHAR(100)

SELECT @COD_USUARIO = Cod_Usuario,
	   @COD_CURSO = Cod_Curso,
	   @NOME = Nome,
	   @EMAIL = Email,
	   @SENHA = Senha
FROM DELETED

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_USUARIO,'USUARIO','COD_USUARIO',@COD_USUARIO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_USUARIO,'USUARIO','COD_CURSO',@COD_CURSO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_USUARIO,'USUARIO','NOME',@NOME

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_USUARIO,'USUARIO','EMAIL',@EMAIL

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_USUARIO,'USUARIO','SENHA',@SENHA

GO


IF (OBJECT_ID('dbo.TR_DELETE_LIVRO') IS NOT NULL ) 
DROP TRIGGER TR_DELETE_LIVRO
GO

CREATE TRIGGER TR_DELETE_LIVRO ON LIVRO
AFTER DELETE
AS
DECLARE
@COD_LIVRO INT,
@TITULO VARCHAR(50),
@EDICAO CHAR(1),
@ANO_PUBLICACAO INT,
@ISBN BIGINT

SELECT @COD_LIVRO = Cod_livro,
	   @TITULO = Titulo,
	   @EDICAO = Edicao,
	   @ANO_PUBLICACAO = Ano_Publicacao,
	   @ISBN = ISBN
FROM DELETED
	
	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_LIVRO,'LIVRO','COD_LIVRO',@COD_LIVRO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_LIVRO,'LIVRO','TITULO',@TITULO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_LIVRO,'LIVRO','EDICAO',@EDICAO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_LIVRO,'LIVRO','ANO_PUBLICACAO',@ANO_PUBLICACAO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_LIVRO,'LIVRO','ISBN',@ISBN

GO


IF (OBJECT_ID('dbo.TR_DELETE_EMPRESTIMO_LIVRO') IS NOT NULL ) 
DROP TRIGGER TR_DELETE_EMPRESTIMO_LIVRO
GO

CREATE TRIGGER TR_DELETE_EMPRESTIMO_LIVRO ON EMPRESTIMO_LIVRO
AFTER DELETE
AS
DECLARE
@COD_EMPRESTIMO_LIVRO INT,
@EMPRESTADO CHAR(1),
@DATA_PREVISTA_ENTREGA DATETIME,
@COD_EMPRESTIMO INT,
@COD_LIVRO INT

SELECT @COD_EMPRESTIMO_LIVRO = Cod_Emprestimo_livro,
	   @EMPRESTADO = Emprestado,
	   @DATA_PREVISTA_ENTREGA = Data_Prevista_Entrega,
	   @COD_EMPRESTIMO = Cod_emprestimo,
	   @COD_LIVRO = Cod_Livro
FROM DELETED

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','COD_EMPRESTIMO_LIVRO',@COD_EMPRESTIMO_LIVRO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','EMPRESTADO',@EMPRESTADO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','DATA_PREVISTA_ENTREGA',@DATA_PREVISTA_ENTREGA

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','COD_EMPRESTIMO',@COD_EMPRESTIMO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO_LIVRO,'EMPRESTIMO_LIVRO','COD_LIVRO',@COD_LIVRO

GO


IF (OBJECT_ID('dbo.TR_DELETE_EMPRESTIMO') IS NOT NULL ) 
DROP TRIGGER TR_DELETE_EMPRESTIMO
GO

CREATE TRIGGER TR_DELETE_EMPRESTIMO ON EMPRESTIMO
AFTER DELETE
AS
DECLARE
@COD_EMPRESTIMO INT,
@COD_USUARIO INT,
@COD_ATENDENTE INT,
@DATA_EMPRESTIMO DATETIME

SELECT @COD_EMPRESTIMO = Cod_Emprestimo,
	   @COD_USUARIO = Cod_Usuario,
	   @COD_ATENDENTE = Cod_Atendente,
	   @DATA_EMPRESTIMO = Data_Emprestimo
FROM DELETED
	
	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO,'EMPRESTIMO','COD_EMPRESTIMO',@COD_EMPRESTIMO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO,'EMPRESTIMO','COD_USUARIO',@COD_USUARIO

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO,'EMPRESTIMO','COD_ATENDENTE',@COD_ATENDENTE

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_EMPRESTIMO,'EMPRESTIMO','DATA_EMPRESTIMO',@DATA_EMPRESTIMO

GO


IF (OBJECT_ID('dbo.TR_DELETE_CURSO') IS NOT NULL ) 
DROP TRIGGER TR_DELETE_CURSO
GO

CREATE TRIGGER TR_DELETE_CURSO ON CURSO
AFTER DELETE
AS
DECLARE
@COD_CURSO INT,
@NOME VARCHAR(100)

SELECT @COD_CURSO = Cod_Curso,
	   @NOME  = Nome
FROM DELETED

	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_CURSO,'CURSO','COD_CURSO',@COD_CURSO
	EXEC PS_INSERT_AUDITORIA 'DELETE',@COD_CURSO,'CURSO','NOME',@NOME
		
GO


IF (OBJECT_ID('dbo.TR_DELETE_ATENDENTE') IS NOT NULL ) 
DROP TRIGGER TR_DELETE_ATENDENTE
GO

CREATE TRIGGER TR_DELETE_ATENDENTE ON ATENDENTE
AFTER DELETE
AS
DECLARE
@Cod_ATENDENTE INT,
@NOME VARCHAR(100),
@EMAIL VARCHAR(100)

SELECT @Cod_ATENDENTE = Cod_Atendente,
	   @NOME  = Nome,
	   @EMAIL = Email
FROM DELETED
	
	EXEC PS_INSERT_AUDITORIA 'DELETE',@Cod_ATENDENTE,'ATENDENTE','COD_ATENDENTE',@Cod_ATENDENTE
	EXEC PS_INSERT_AUDITORIA 'DELETE',@Cod_ATENDENTE,'ATENDENTE','NOME',@NOME
	EXEC PS_INSERT_AUDITORIA 'DELETE',@Cod_ATENDENTE,'ATENDENTE','EMAIL',@EMAIL
	
GO
